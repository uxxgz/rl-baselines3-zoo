FetchReach-v1:
  n_timesteps: !!float 20000
  policy: 'MultiInputPolicy'
  buffer_size: 1000000
  ent_coef: 'auto'
  batch_size: 2**8
  gamma: 0.9
  learning_rate: 0.001
  learning_starts: 1000
  normalize: True
  replay_buffer_class: HerReplayBuffer
  replay_buffer_kwargs: "dict(
    goal_selection_strategy='future',
    n_sampled_goal=4
  )"
  policy_kwargs: "dict(net_arch=[64, 64])"



PandaReachDense-v3:
  n_timesteps: !!float 1000000.0
  policy: 'MultiInputPolicy'
  buffer_size: 1000000
  batch_size: 2 ** 8
  learning_rate: 0.001
  normalize: true
  replay_buffer_class: HerReplayBuffer
  replay_buffer_kwargs: "dict( goal_selection_strategy='future', n_sampled_goal=4, )"
  policy_kwargs: "dict(net_arch=[64, 64])"

PandaPushDense-v3:
  n_timesteps: !!float 1000000.0
  policy: 'MultiInputPolicy'
  buffer_size: 1000000
  batch_size: 2 ** 8
  learning_rate: 0.001
  normalize: true
  replay_buffer_class: HerReplayBuffer
  replay_buffer_kwargs: "dict( goal_selection_strategy='future', n_sampled_goal=4, )"
  policy_kwargs: "dict(net_arch=[64, 64])"

PandaSlideDense-v3:
  n_timesteps: !!float 1000000.0
  policy: 'MultiInputPolicy'
  buffer_size: 1000000
  batch_size: 2 ** 8
  learning_rate: 0.001
  normalize: true
  replay_buffer_class: HerReplayBuffer
  replay_buffer_kwargs: "dict( goal_selection_strategy='future', n_sampled_goal=4, )"
  policy_kwargs: "dict(net_arch=[64, 64])"

PandaPickAndPlace-v3:
  n_timesteps: !!float 1000000.0
  policy: 'MultiInputPolicy'
  buffer_size: 1000000
  batch_size: 2 ** 8
  learning_rate: 0.001
  normalize: true
  replay_buffer_class: HerReplayBuffer
  replay_buffer_kwargs: "dict( goal_selection_strategy='future', n_sampled_goal=4, )"
  policy_kwargs: "dict(net_arch=[64, 64])"


PandaReach-v3:
  n_timesteps: !!float 1000000.0
  policy: 'MultiInputPolicy'
  buffer_size: 1000000
  batch_size: 2 ** 8
  learning_rate: 0.001
  normalize: true
  replay_buffer_class: HerReplayBuffer
  replay_buffer_kwargs: "dict( goal_selection_strategy='future', n_sampled_goal=4, )"
  policy_kwargs: "dict(net_arch=[64, 64])"

PandaPush-v3:
  n_timesteps: !!float 1000000.0
  policy: 'MultiInputPolicy'
  buffer_size: 1000000
  batch_size: 2 ** 8
  learning_rate: 0.001
  normalize: true
  replay_buffer_class: HerReplayBuffer
  replay_buffer_kwargs: "dict( goal_selection_strategy='future', n_sampled_goal=4, )"
  policy_kwargs: "dict(net_arch=[64, 64])"

PandaSlide-v3:
  n_timesteps: !!float 1000000.0
  policy: 'MultiInputPolicy'
  buffer_size: 1000000
  batch_size: 2 ** 8
  learning_rate: 0.001
  normalize: true
  replay_buffer_class: HerReplayBuffer
  replay_buffer_kwargs: "dict( goal_selection_strategy='future', n_sampled_goal=4, )"
  policy_kwargs: "dict(net_arch=[64, 64])"

PandaPickAndPlace-v3:
  n_timesteps: !!float 1000000.0
  policy: 'MultiInputPolicy'
  buffer_size: 1000000
  batch_size: 2 ** 8
  learning_rate: 0.001
  normalize: true
  replay_buffer_class: HerReplayBuffer
  replay_buffer_kwargs: "dict( goal_selection_strategy='future', n_sampled_goal=4, )"
  policy_kwargs: "dict(net_arch=[64, 64])"




